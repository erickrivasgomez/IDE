/* Generated By:JavaCC: Do not edit this line. Parser.java */
public class Parser implements ParserConstants {
public static void main(String args[]) throws ParseException {
        Parser miParser = new Parser(System.in);
        miParser.inicio() ;
}

  static final public void inicio() throws ParseException {
    producciones();
    jj_consume_token(0);
  }

  static final public void producciones() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
    case CAR:
    case BOOL:
    case FLOTANTE:
    case FUNCTION:
    case ENCABEZADO:
    case DO:
    case FOR:
    case IF:
    case WHILE:
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DO:
        case WHILE:
          mientras();
          break;
        case IF:
          si();
          break;
        case INT:
        case CAR:
        case BOOL:
        case FLOTANTE:
          declaracion();
          break;
        case FOR:
          por();
          break;
        case FUNCTION:
          funcion();
          break;
        case ENCABEZADO:
          header();
          break;
        default:
          jj_la1[0] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
        case CAR:
        case BOOL:
        case FLOTANTE:
        case FUNCTION:
        case ENCABEZADO:
        case DO:
        case FOR:
        case IF:
        case WHILE:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
      }
      break;
    default:
      jj_la1[2] = jj_gen;
      nada();
    }
  }

  static final public void header() throws ParseException {
    jj_consume_token(ENCABEZADO);
                 System.out.println("Encabezado");
  }

  static final public void tipo() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      jj_consume_token(INT);
           System.out.print("Entero ");
      break;
    case CAR:
      jj_consume_token(CAR);
           System.out.print("Caracter ");
      break;
    case BOOL:
      jj_consume_token(BOOL);
            System.out.print("Booleano ");
      break;
    case FLOTANTE:
      jj_consume_token(FLOTANTE);
                System.out.print("Flotante ");
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void mientras() throws ParseException {
 System.out.println("Entrada a ciclo WHILE");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DO:
      jj_consume_token(DO);
      jj_consume_token(LLA1);
      producciones();
      jj_consume_token(LLA2);
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    jj_consume_token(WHILE);
    jj_consume_token(CON);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LLA1:
      jj_consume_token(LLA1);
      producciones();
      jj_consume_token(LLA2);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
                                                                                                                             System.out.println("Salida de ciclo WHILE");
  }

  static final public void si() throws ParseException {
     System.out.println("Entra a IF");
    jj_consume_token(IF);
    jj_consume_token(CON);
    jj_consume_token(LLA1);
    producciones();
    jj_consume_token(LLA2);
                                          System.out.println("Salida de IF.");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      sino();
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
  }

  static final public void sino() throws ParseException {
     System.out.print("Entrada a ELSE ");
    jj_consume_token(ELSE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
                                                  System.out.println("IF");
      si();
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
                                                                                   System.out.println("");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LLA1:
      jj_consume_token(LLA1);
      producciones();
      jj_consume_token(LLA2);
                                                                                                                                         System.out.println("Salida de ELSE.");
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
  }

  static final public void por() throws ParseException {
 System.out.println("Entrada a ciclo FOR.");
    jj_consume_token(FOR);
    jj_consume_token(PAR1);
    declaracion();
    porcond();
    jj_consume_token(PUNTOCOMA);
    jj_consume_token(INC);
    jj_consume_token(PAR2);
    jj_consume_token(LLA1);
    producciones();
    jj_consume_token(LLA2);
 System.out.println("Salida de ciclo FOR.");
  }

  static final public void porcond() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM:
    case CAD:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CAD:
        jj_consume_token(CAD);
        break;
      case NUM:
        jj_consume_token(NUM);
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        jj_consume_token(EQ);
        break;
      case DIF:
        jj_consume_token(DIF);
        break;
      case MAYIG:
        jj_consume_token(MAYIG);
        break;
      case MENIG:
        jj_consume_token(MENIG);
        break;
      case MAY:
        jj_consume_token(MAY);
        break;
      case MEN:
        jj_consume_token(MEN);
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CAD:
        jj_consume_token(CAD);
        break;
      case NUM:
        jj_consume_token(NUM);
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case VERDAD:
      jj_consume_token(VERDAD);
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void nada() throws ParseException {
 System.out.println("Sin acciones");
  }

  static final public void declaracion() throws ParseException {
    tipo();
    jj_consume_token(CAD);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IGUALDAD:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_2;
      }
      jj_consume_token(IGUALDAD);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CAD:
        jj_consume_token(CAD);
        break;
      case VERDAD:
      case FALSO:
      case CARACTER:
      case FLOT:
      case NUM:
        valor();
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(PUNTOCOMA);
                                                       System.out.println("declarado.");
  }

  static final public void valor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM:
      jj_consume_token(NUM);
      break;
    case FLOT:
      jj_consume_token(FLOT);
      break;
    case VERDAD:
      jj_consume_token(VERDAD);
      break;
    case FALSO:
      jj_consume_token(FALSO);
      break;
    case CARACTER:
      jj_consume_token(CARACTER);
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void funcion() throws ParseException {
    jj_consume_token(FUNCTION);
               System.out.print("Funcion tipo: ");
    jj_consume_token(CAD);
    jj_consume_token(PAR1);
    jj_consume_token(PAR2);
    jj_consume_token(DOSPUNTOS);
    tipo();
                                                                                      System.out.println();
    jj_consume_token(LLA1);
    producciones();
    valor();
    jj_consume_token(PUNTOCOMA);
                                                                                                                                                   System.out.println("Salida de funcion");
    jj_consume_token(LLA2);
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[16];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xe0fc0000,0xe0fc0000,0xe0fc0000,0x3c0000,0x20000000,0x0,0x0,0x80000000,0x0,0x0,0x3f000,0x0,0x200,0x10000000,0x600,0x600,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x40,0x40,0x40,0x0,0x0,0x10,0x1,0x0,0x10,0x1800,0x0,0x1800,0x1800,0x0,0x1e00,0xe00,};
   }

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[47];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 16; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 47; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
